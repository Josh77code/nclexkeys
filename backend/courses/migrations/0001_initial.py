# Generated by Django 5.2.4 on 2025-07-25 09:57

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CourseCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Course Categories',
                'db_table': 'course_categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('video_url', models.URLField(help_text='YouTube or video URL', validators=[django.core.validators.URLValidator()])),
                ('duration_minutes', models.PositiveIntegerField(blank=True, help_text='Course duration in minutes', null=True)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('category', models.CharField(choices=[('fundamentals', 'NCLEX-RN Fundamentals'), ('pharmacology', 'Pharmacology'), ('medical_surgical', 'Medical-Surgical'), ('pediatrics', 'Pediatrics'), ('obstetrics', 'Obstetrics & Gynecology'), ('psychiatric', 'Psychiatric Nursing'), ('community', 'Community Health'), ('leadership', 'Leadership & Management'), ('other', 'Other')], default='fundamentals', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_courses', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_courses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'courses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseEnrollment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='For time-limited access', null=True)),
                ('payment_id', models.CharField(blank=True, max_length=100, null=True)),
                ('amount_paid', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'course_enrollments',
                'ordering': ['-enrolled_at'],
            },
        ),
        migrations.CreateModel(
            name='UserCourseProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('progress_percentage', models.PositiveIntegerField(default=0, help_text='Progress percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('sections_completed', models.JSONField(blank=True, default=list, help_text='List of completed section IDs')),
                ('notes', models.TextField(blank=True, help_text="User's personal notes for this course")),
                ('rating', models.PositiveIntegerField(blank=True, help_text='User rating (1-5 stars)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback', models.TextField(blank=True, help_text='User feedback about the course')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_course_progress',
                'ordering': ['-last_accessed'],
            },
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['title'], name='courses_title_0466cc_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['category'], name='courses_categor_33f89e_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_active'], name='courses_is_acti_25e634_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_featured'], name='courses_is_feat_29280c_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['created_at'], name='courses_created_0aa93c_idx'),
        ),
        migrations.AddIndex(
            model_name='courseenrollment',
            index=models.Index(fields=['user'], name='course_enro_user_id_79d5a1_idx'),
        ),
        migrations.AddIndex(
            model_name='courseenrollment',
            index=models.Index(fields=['course'], name='course_enro_course__4c96ff_idx'),
        ),
        migrations.AddIndex(
            model_name='courseenrollment',
            index=models.Index(fields=['is_active'], name='course_enro_is_acti_3aaf39_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='courseenrollment',
            unique_together={('user', 'course')},
        ),
        migrations.AddIndex(
            model_name='usercourseprogress',
            index=models.Index(fields=['user'], name='user_course_user_id_8166b8_idx'),
        ),
        migrations.AddIndex(
            model_name='usercourseprogress',
            index=models.Index(fields=['course'], name='user_course_course__689467_idx'),
        ),
        migrations.AddIndex(
            model_name='usercourseprogress',
            index=models.Index(fields=['progress_percentage'], name='user_course_progres_10fb1e_idx'),
        ),
        migrations.AddIndex(
            model_name='usercourseprogress',
            index=models.Index(fields=['completed_at'], name='user_course_complet_4781ce_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usercourseprogress',
            unique_together={('user', 'course')},
        ),
    ]
