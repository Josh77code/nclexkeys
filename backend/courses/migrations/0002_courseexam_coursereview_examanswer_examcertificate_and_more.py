# Generated by Django 5.2.4 on 2025-07-26 09:56

import cloudinary.models
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CourseExam',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('instructions', models.TextField(blank=True, help_text='Instructions for students')),
                ('exam_type', models.CharField(choices=[('quiz', 'Quiz'), ('midterm', 'Midterm Exam'), ('final', 'Final Exam'), ('practice', 'Practice Test'), ('assignment', 'Assignment')], default='quiz', max_length=20)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('expert', 'Expert')], default='medium', max_length=10)),
                ('total_questions', models.PositiveIntegerField(default=0)),
                ('time_limit_minutes', models.PositiveIntegerField(blank=True, help_text='Time limit in minutes (optional)', null=True)),
                ('passing_score', models.PositiveIntegerField(default=70, help_text='Minimum score to pass (percentage)')),
                ('max_attempts', models.PositiveIntegerField(default=3, help_text='Maximum attempts allowed')),
                ('shuffle_questions', models.BooleanField(default=True)),
                ('shuffle_answers', models.BooleanField(default=True)),
                ('show_results_immediately', models.BooleanField(default=True)),
                ('show_correct_answers', models.BooleanField(default=True)),
                ('allow_review', models.BooleanField(default=True)),
                ('required_course_progress', models.PositiveIntegerField(default=0, help_text='Minimum course progress percentage to access this exam')),
                ('is_active', models.BooleanField(default=True)),
                ('is_published', models.BooleanField(default=False)),
                ('available_from', models.DateTimeField(blank=True, null=True)),
                ('available_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'course_exams',
                'ordering': ['course', 'exam_type', 'title'],
            },
        ),
        migrations.CreateModel(
            name='CourseReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.PositiveIntegerField(help_text='Rating (1-5 stars)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_text', models.TextField(blank=True)),
                ('is_approved', models.BooleanField(default=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('admin_notes', models.TextField(blank=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'course_reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExamAnswer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('answer_text', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
            ],
            options={
                'db_table': 'exam_answers',
                'ordering': ['question', 'order'],
            },
        ),
        migrations.CreateModel(
            name='ExamCertificate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('certificate_number', models.CharField(max_length=50, unique=True)),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('valid_until', models.DateTimeField(blank=True, null=True)),
                ('certificate_file', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='raw')),
                ('certificate_url', models.URLField(blank=True)),
                ('verification_code', models.CharField(max_length=50, unique=True)),
                ('is_valid', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'exam_certificates',
                'ordering': ['-issued_at'],
            },
        ),
        migrations.CreateModel(
            name='ExamQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('fill_blank', 'Fill in the Blank'), ('essay', 'Essay'), ('matching', 'Matching'), ('ordering', 'Ordering')], default='multiple_choice', max_length=20)),
                ('points', models.PositiveIntegerField(default=1)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('explanation', models.TextField(blank=True, help_text='Explanation shown after answering')),
                ('image', cloudinary.models.CloudinaryField(blank=True, help_text='Optional question image', max_length=255, null=True, verbose_name='image')),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('expert', 'Expert')], default='medium', max_length=10)),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags for categorization')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'exam_questions',
                'ordering': ['exam', 'order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserExamAnswer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text_answer', models.TextField(blank=True)),
                ('answer_data', models.JSONField(blank=True, default=dict)),
                ('is_correct', models.BooleanField(default=False)),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken_seconds', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'user_exam_answers',
            },
        ),
        migrations.CreateModel(
            name='UserExamAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('attempt_number', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned'), ('timed_out', 'Timed Out')], default='in_progress', max_length=20)),
                ('total_questions', models.PositiveIntegerField(default=0)),
                ('correct_answers', models.PositiveIntegerField(default=0)),
                ('total_points', models.PositiveIntegerField(default=0)),
                ('earned_points', models.PositiveIntegerField(default=0)),
                ('percentage_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('time_taken_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('passed', models.BooleanField(default=False)),
                ('current_question_index', models.PositiveIntegerField(default=0)),
                ('exam_data', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'db_table': 'user_exam_attempts',
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddField(
            model_name='course',
            name='course_type',
            field=models.CharField(choices=[('free', 'Free'), ('paid', 'Paid'), ('premium', 'Premium')], default='free', max_length=10),
        ),
        migrations.AddField(
            model_name='course',
            name='currency',
            field=models.CharField(default='USD', max_length=3),
        ),
        migrations.AddField(
            model_name='course',
            name='discount_end_date',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='course',
            name='discount_percentage',
            field=models.PositiveIntegerField(default=0, help_text='Discount percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='course',
            name='discount_start_date',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='course',
            name='has_discount',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='course',
            name='moderated_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='course',
            name='moderated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_courses', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='course',
            name='moderation_reason',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='course',
            name='moderation_status',
            field=models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', max_length=20),
        ),
        migrations.AddField(
            model_name='course',
            name='prerequisites',
            field=models.ManyToManyField(blank=True, help_text='Courses that must be completed before this one', to='courses.course'),
        ),
        migrations.AddField(
            model_name='course',
            name='price',
            field=models.DecimalField(decimal_places=2, default=0.0, help_text='Course price (0.00 for free courses)', max_digits=10),
        ),
        migrations.AddField(
            model_name='course',
            name='thumbnail',
            field=cloudinary.models.CloudinaryField(blank=True, help_text='Course thumbnail image', max_length=255, null=True, verbose_name='image'),
        ),
        migrations.AddField(
            model_name='course',
            name='video_file',
            field=cloudinary.models.CloudinaryField(blank=True, help_text='Upload MP4 or other video file', max_length=255, null=True, verbose_name='video'),
        ),
        migrations.AddField(
            model_name='course',
            name='video_source',
            field=models.CharField(choices=[('url', 'Video URL'), ('upload', 'Uploaded Video')], default='url', help_text='Choose between video URL or file upload', max_length=10),
        ),
        migrations.AddField(
            model_name='courseenrollment',
            name='currency',
            field=models.CharField(default='USD', max_length=3),
        ),
        migrations.AddField(
            model_name='courseenrollment',
            name='discount_applied',
            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
        ),
        migrations.AddField(
            model_name='courseenrollment',
            name='payment_method',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='courseenrollment',
            name='payment_status',
            field=models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20),
        ),
        migrations.AddField(
            model_name='courseenrollment',
            name='refund_amount',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True),
        ),
        migrations.AddField(
            model_name='courseenrollment',
            name='refund_reason',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='courseenrollment',
            name='refunded_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='course',
            name='video_url',
            field=models.URLField(blank=True, help_text='YouTube, Vimeo, or other video URL', null=True, validators=[django.core.validators.URLValidator()]),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['course_type'], name='courses_course__f7418a_idx'),
        ),
        migrations.AddIndex(
            model_name='courseenrollment',
            index=models.Index(fields=['payment_status'], name='course_enro_payment_15282c_idx'),
        ),
        migrations.AddField(
            model_name='courseexam',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='courses.course'),
        ),
        migrations.AddField(
            model_name='courseexam',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_exams', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='courseexam',
            name='prerequisite_exams',
            field=models.ManyToManyField(blank=True, help_text='Exams that must be passed before this one', to='courses.courseexam'),
        ),
        migrations.AddField(
            model_name='coursereview',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_reviews', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='coursereview',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='courses.course'),
        ),
        migrations.AddField(
            model_name='coursereview',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_reviews', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='examcertificate',
            name='exam',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='courses.courseexam'),
        ),
        migrations.AddField(
            model_name='examcertificate',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='examquestion',
            name='exam',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='courses.courseexam'),
        ),
        migrations.AddField(
            model_name='examanswer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='courses.examquestion'),
        ),
        migrations.AddField(
            model_name='userexamanswer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.examquestion'),
        ),
        migrations.AddField(
            model_name='userexamanswer',
            name='selected_answers',
            field=models.ManyToManyField(blank=True, to='courses.examanswer'),
        ),
        migrations.AddField(
            model_name='userexamattempt',
            name='exam',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='courses.courseexam'),
        ),
        migrations.AddField(
            model_name='userexamattempt',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_attempts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userexamanswer',
            name='attempt',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='courses.userexamattempt'),
        ),
        migrations.AddField(
            model_name='examcertificate',
            name='attempt',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.userexamattempt'),
        ),
        migrations.AddIndex(
            model_name='courseexam',
            index=models.Index(fields=['course'], name='course_exam_course__7c7c64_idx'),
        ),
        migrations.AddIndex(
            model_name='courseexam',
            index=models.Index(fields=['is_active', 'is_published'], name='course_exam_is_acti_fed504_idx'),
        ),
        migrations.AddIndex(
            model_name='courseexam',
            index=models.Index(fields=['exam_type'], name='course_exam_exam_ty_3e677b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='coursereview',
            unique_together={('user', 'course')},
        ),
        migrations.AddIndex(
            model_name='examquestion',
            index=models.Index(fields=['exam'], name='exam_questi_exam_id_0dd5c9_idx'),
        ),
        migrations.AddIndex(
            model_name='examquestion',
            index=models.Index(fields=['question_type'], name='exam_questi_questio_726813_idx'),
        ),
        migrations.AddIndex(
            model_name='examquestion',
            index=models.Index(fields=['is_active'], name='exam_questi_is_acti_88975e_idx'),
        ),
        migrations.AddIndex(
            model_name='examanswer',
            index=models.Index(fields=['question'], name='exam_answer_questio_db1085_idx'),
        ),
        migrations.AddIndex(
            model_name='examanswer',
            index=models.Index(fields=['is_correct'], name='exam_answer_is_corr_4124a8_idx'),
        ),
        migrations.AddIndex(
            model_name='userexamattempt',
            index=models.Index(fields=['user'], name='user_exam_a_user_id_7d225e_idx'),
        ),
        migrations.AddIndex(
            model_name='userexamattempt',
            index=models.Index(fields=['exam'], name='user_exam_a_exam_id_929ab1_idx'),
        ),
        migrations.AddIndex(
            model_name='userexamattempt',
            index=models.Index(fields=['status'], name='user_exam_a_status_e00e8d_idx'),
        ),
        migrations.AddIndex(
            model_name='userexamattempt',
            index=models.Index(fields=['passed'], name='user_exam_a_passed_ab6be5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userexamattempt',
            unique_together={('user', 'exam', 'attempt_number')},
        ),
        migrations.AddIndex(
            model_name='userexamanswer',
            index=models.Index(fields=['attempt'], name='user_exam_a_attempt_673187_idx'),
        ),
        migrations.AddIndex(
            model_name='userexamanswer',
            index=models.Index(fields=['question'], name='user_exam_a_questio_f1ad46_idx'),
        ),
        migrations.AddIndex(
            model_name='userexamanswer',
            index=models.Index(fields=['is_correct'], name='user_exam_a_is_corr_2df413_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userexamanswer',
            unique_together={('attempt', 'question')},
        ),
        migrations.AddIndex(
            model_name='examcertificate',
            index=models.Index(fields=['user'], name='exam_certif_user_id_8436ad_idx'),
        ),
        migrations.AddIndex(
            model_name='examcertificate',
            index=models.Index(fields=['exam'], name='exam_certif_exam_id_3a2d47_idx'),
        ),
        migrations.AddIndex(
            model_name='examcertificate',
            index=models.Index(fields=['certificate_number'], name='exam_certif_certifi_b985ce_idx'),
        ),
        migrations.AddIndex(
            model_name='examcertificate',
            index=models.Index(fields=['verification_code'], name='exam_certif_verific_4d91f2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='examcertificate',
            unique_together={('user', 'exam')},
        ),
    ]
