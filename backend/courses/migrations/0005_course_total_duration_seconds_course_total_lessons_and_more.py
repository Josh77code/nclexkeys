# Generated by Django 5.2.4 on 2025-07-30 01:08

import cloudinary.models
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0004_courseappeal'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='course',
            name='total_duration_seconds',
            field=models.PositiveIntegerField(default=0, help_text='Auto-calculated total duration'),
        ),
        migrations.AddField(
            model_name='course',
            name='total_lessons',
            field=models.PositiveIntegerField(default=0, help_text='Auto-calculated from lessons'),
        ),
        migrations.AddField(
            model_name='course',
            name='total_sections',
            field=models.PositiveIntegerField(default=0, help_text='Auto-calculated from sections'),
        ),
        migrations.AddField(
            model_name='usercourseprogress',
            name='current_lesson_id',
            field=models.UUIDField(blank=True, help_text='Current lesson being studied', null=True),
        ),
        migrations.AddField(
            model_name='usercourseprogress',
            name='current_section_id',
            field=models.UUIDField(blank=True, help_text='Current section being studied', null=True),
        ),
        migrations.AddField(
            model_name='usercourseprogress',
            name='total_watch_time_seconds',
            field=models.PositiveIntegerField(default=0, help_text='Total time spent watching'),
        ),
        migrations.CreateModel(
            name='CourseSection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_preview', models.BooleanField(default=False, help_text='Allow free preview of this section')),
                ('required_previous_completion', models.BooleanField(default=True, help_text='Must complete previous sections first')),
                ('total_lessons', models.PositiveIntegerField(default=0, help_text='Auto-calculated')),
                ('total_duration_seconds', models.PositiveIntegerField(default=0, help_text='Auto-calculated')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='courses.course')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'course_sections',
                'ordering': ['course', 'order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseLesson',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('lesson_type', models.CharField(choices=[('video', 'Video Lesson'), ('text', 'Text/Article'), ('quiz', 'Quiz'), ('assignment', 'Assignment'), ('resource', 'Downloadable Resource'), ('live', 'Live Session')], default='video', max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('video_source', models.CharField(choices=[('url', 'Video URL'), ('upload', 'Uploaded Video'), ('streaming', 'Streaming URL')], default='url', max_length=10)),
                ('video_url', models.URLField(blank=True, help_text='YouTube, Vimeo, or direct video URL', null=True)),
                ('video_file', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='video')),
                ('video_streaming_url', models.URLField(blank=True, help_text='HLS or DASH streaming URL', null=True)),
                ('text_content', models.TextField(blank=True, help_text='Rich text content for text lessons')),
                ('thumbnail', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('attachments', models.JSONField(blank=True, default=list, help_text='List of attachment URLs/files')),
                ('duration_seconds', models.PositiveIntegerField(blank=True, help_text='Lesson duration in seconds', null=True)),
                ('is_preview', models.BooleanField(default=False, help_text='Allow free preview')),
                ('is_downloadable', models.BooleanField(default=False, help_text='Allow video download')),
                ('require_completion', models.BooleanField(default=True, help_text='Must complete to progress')),
                ('minimum_watch_percentage', models.PositiveIntegerField(default=80, help_text='Minimum percentage to mark as completed', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('auto_play_next', models.BooleanField(default=False, help_text='Auto-play next lesson')),
                ('keywords', models.CharField(blank=True, help_text='Keywords for search', max_length=500)),
                ('notes_for_instructor', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='courses.coursesection')),
            ],
            options={
                'db_table': 'course_lessons',
                'ordering': ['section', 'order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserLessonProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('watch_time_seconds', models.PositiveIntegerField(default=0, help_text='Total time watched')),
                ('current_position_seconds', models.PositiveIntegerField(default=0, help_text='Current video position')),
                ('watch_percentage', models.PositiveIntegerField(default=0, help_text='Percentage of video watched', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('first_accessed', models.DateTimeField(auto_now_add=True)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('access_count', models.PositiveIntegerField(default=1)),
                ('bookmarks', models.JSONField(blank=True, default=list, help_text='List of bookmarked positions')),
                ('notes', models.TextField(blank=True, help_text="User's personal notes for this lesson")),
                ('rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback', models.TextField(blank=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='courses.courselesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_lesson_progress',
                'ordering': ['-last_accessed'],
            },
        ),
        migrations.AddIndex(
            model_name='coursesection',
            index=models.Index(fields=['course', 'order'], name='course_sect_course__be0a09_idx'),
        ),
        migrations.AddIndex(
            model_name='coursesection',
            index=models.Index(fields=['is_active'], name='course_sect_is_acti_5f0f95_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='coursesection',
            unique_together={('course', 'title')},
        ),
        migrations.AddIndex(
            model_name='courselesson',
            index=models.Index(fields=['section', 'order'], name='course_less_section_5dd817_idx'),
        ),
        migrations.AddIndex(
            model_name='courselesson',
            index=models.Index(fields=['lesson_type'], name='course_less_lesson__cb9545_idx'),
        ),
        migrations.AddIndex(
            model_name='courselesson',
            index=models.Index(fields=['is_active'], name='course_less_is_acti_f6cb6d_idx'),
        ),
        migrations.AddIndex(
            model_name='courselesson',
            index=models.Index(fields=['is_preview'], name='course_less_is_prev_8342b1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='courselesson',
            unique_together={('section', 'title')},
        ),
        migrations.AddIndex(
            model_name='userlessonprogress',
            index=models.Index(fields=['user'], name='user_lesson_user_id_5d18f7_idx'),
        ),
        migrations.AddIndex(
            model_name='userlessonprogress',
            index=models.Index(fields=['lesson'], name='user_lesson_lesson__9d98fa_idx'),
        ),
        migrations.AddIndex(
            model_name='userlessonprogress',
            index=models.Index(fields=['is_completed'], name='user_lesson_is_comp_8bdea0_idx'),
        ),
        migrations.AddIndex(
            model_name='userlessonprogress',
            index=models.Index(fields=['last_accessed'], name='user_lesson_last_ac_dc64a3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userlessonprogress',
            unique_together={('user', 'lesson')},
        ),
    ]
